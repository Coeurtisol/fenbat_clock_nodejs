// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Entite {
  id        Int        @id @default(autoincrement())
  name      String
  adresse   String     @default("")
  Users     User[]
  affaires  Affaire[]
  pointages Pointage[]

  @@map("entite")
}

model TypeAffaire {
  id       Int       @id @default(autoincrement())
  name     String
  affaires Affaire[]

  @@map("typeaffaire")
}

model SecteurAffaire {
  id       Int       @id @default(autoincrement())
  name     String
  affaires Affaire[]

  @@map("secteuraffaire")
}

model ClientAffaire {
  id       Int       @id @default(autoincrement())
  name     String
  affaires Affaire[]

  @@map("clientaffaire")
}

model DonneurAffaire {
  id       Int       @id @default(autoincrement())
  name     String
  affaires Affaire[]

  @@map("donneuraffaire")
}

model Affaire {
  id               Int            @id @default(autoincrement())
  name             String
  adresse          String         @default("")
  secteurAffaire   SecteurAffaire @relation(fields: [secteurAffaireId], references: [id])
  secteurAffaireId Int
  typeAffaire      TypeAffaire    @relation(fields: [typeAffaireId], references: [id])
  typeAffaireId    Int
  clientAffaire    ClientAffaire  @relation(fields: [clientAffaireId], references: [id])
  clientAffaireId  Int
  donneurAffaire   DonneurAffaire @relation(fields: [donneurAffaireId], references: [id])
  donneurAffaireId Int
  etat             String
  entite           Entite         @relation(fields: [entiteId], references: [id])
  entiteId         Int
  pointages        Pointage[]
  commandes        Commande[]

  @@map("affaire")
}

model Permission {
  id    Int    @id
  name  String
  roles Role[]

  @@map("permission")
}

model Role {
  id           Int        @id @default(autoincrement())
  name         String
  users        User[]
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@map("role")
}

model User {
  id          Int        @id @default(autoincrement())
  firstname   String
  lastname    String
  accessCode  String
  password    String?
  status      Boolean    @default(true)
  pointages   Pointage[]
  semaines    Semaine[]
  entite      Entite?    @relation(fields: [entiteId], references: [id])
  entiteId    Int?
  commandes   Commande[]
  role        Role       @relation(fields: [roleId], references: [id])
  roleId      Int
  email       String?    @unique
  phoneNumber String?

  @@map("user")
}

model Pointage {
  id             Int           @id @default(autoincrement())
  date           DateTime
  moment         Boolean
  valeur         Float
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  motifAbsence   MotifAbsence? @relation(fields: [motifAbsenceId], references: [id])
  motifAbsenceId Int?
  affaire        Affaire?      @relation(fields: [affaireId], references: [id])
  affaireId      Int?
  entite         Entite?       @relation(fields: [entiteId], references: [id])
  entiteId       Int?
  semaine        Semaine       @relation(fields: [semaineId], references: [id])
  semaineId      Int

  @@map("pointage")
}

model MotifAbsence {
  id        Int        @id @default(autoincrement())
  name      String
  bloquant  Boolean?
  pointages Pointage[]

  @@map("motifabsence")
}

model Semaine {
  id             Int         @id @default(autoincrement())
  annee          Int
  numero         Int
  user           User        @relation(fields: [userId], references: [id])
  userId         Int
  etatSemaine    EtatSemaine @relation(fields: [etatSemaineId], references: [id])
  etatSemaineId  Int
  pointages      Pointage[]
  commentaire    String?     @db.Text
  PDFemploye     String?
  PDFresponsable String?

  @@map("semaine")
}

model EtatSemaine {
  id       Int       @id
  name     String
  semaines Semaine[]

  @@map("etatsemaine")
}

model Commande {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  article       Article     @relation(fields: [articleId], references: [id])
  articleId     Int
  fournisseur   Fournisseur @relation(fields: [fournisseurId], references: [id])
  fournisseurId Int
  affaire       Affaire?    @relation(fields: [affaireId], references: [id])
  affaireId     Int?
  quantite      Int
  etat          String      @default("En attente")
  valideeLe     DateTime?
  valideePar    String?

  @@map("commande")
}

model Article {
  id           Int                  @id @default(autoincrement())
  name         String
  categorie    Categorie?           @relation(fields: [categorieId], references: [id], onDelete: SetNull)
  categorieId  Int?
  commandes    Commande[]
  fournisseurs ArticleFournisseur[]

  @@map("article")
}

model Categorie {
  id       Int       @id @default(autoincrement())
  name     String
  articles Article[]

  @@map("categorie")
}

model Fournisseur {
  id        Int                  @id @default(autoincrement())
  name      String
  articles  ArticleFournisseur[]
  commandes Commande[]

  @@map("fournisseur")
}

model ArticleFournisseur {
  article       Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId     Int
  fournisseur   Fournisseur @relation(fields: [fournisseurId], references: [id], onDelete: Cascade)
  fournisseurId Int

  @@id([articleId, fournisseurId])
  @@map("_articletofournisseur")
}
